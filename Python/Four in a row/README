eli.yacobov1
Eli Yacobov 

I discussed the exercise with: 

=======================================================================
=  README for ex12: ex12
=======================================================================

=======================================================================
=  Description:

game.py - contains a class of game with the following functions:

make_move - ets a column in which the user wants to put the disc.
method has to assume who is the current player according
to the games progress.also returns True when successful
if the disc cant be put there we must raise an exception
with the message : "illegal move"

get_winner - checks if someone won or not by using the helper functions. and returns if someone won it will return which player won 
and the coordinates of the win.
else it will returns tie or if no one won yet
it will return none.

four_in_row - checks if there are four discs next
 to each other of the same player
in the same row

four_in_col - checks if there are four discs following each other
on the same column

four_in_cross - checks if there are four discs following each other
in a cross. turns crosses to lines ans searches in them

is_board_full - checks if the board is full and there for the game ended

get_player_at - returns the disc of which player is on the given
coordinates 1 for player one and 2 for player 2 or none if
no one is there. if the location is not valid it will
return an error message

get_current_player - checks which player has more discs in the board
and decides accordingly who should make this current turn.

get_win_coordinates - returns the winning strikes coordinates.

ai.py - contains a class of the ai of the game with the following functions:

find_legal_move - checks for a column with an empty disc and returns it
if game is over - returns error message

legal_helper - uses random for a possible col number and checks if that
column is not full. if the column is full
the function calls itself it finds a possible column

three_in_col , three_in_row, three_in_cross - checks if there is a possible win in the board.
if so, returns where for the player to put a disc there
and win or prevent the other player from winning.

mygui - the graphics of the game using tkinter with the following functions:

new_window - function that enters a new window and destroys the previous

main_menu - creating the main window

final_menu - creates the final menu with the option to play again where we 
create a new game with a new parent using inner functions and 
an exit option which closes the game.


class ConnectFour -a class of the moves of the game in the gui
__init__ - first creates new frame and canvas for the game instance
and than the board and buttons with the column number for
the user to press when playing
single_turn - checks if pc vs pc game,if so wont allow to press button
checks if player 1 is ai,if so, makes a move
checks if player 2 is ai,if so, makes a move
prints win message
com_vs_com - defines the type of the players as computer vs computer
player_vs_com - defines the type of the players as player vs computer
com_vs_player - defines the type of the players as computer vs player
mark_win -adds 1-4 digits in order to mark the winning strike
in the canvas of the board created in the gui
mark_win_helper - reates the exact coordinates of the winning strike
according to the given coordiante
create_oval - creates a circle in a given coordinate and in a given color


auto_game_instance -  runs a game between two AIs

four_in_a_row.py - runs the game.


=.
=======================================================================


======================
=  Special Comments  =
======================
